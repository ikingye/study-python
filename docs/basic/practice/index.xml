<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实践 on Python 学习笔记</title>
    <link>https://ikingye.github.io/study-python/docs/basic/practice/</link>
    <description>Recent content in 实践 on Python 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-python/docs/basic/practice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>协程</title>
      <link>https://ikingye.github.io/study-python/docs/basic/practice/coroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-python/docs/basic/practice/coroutine/</guid>
      <description>Python 协程  执行效率高  子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。 不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了    因为协程是一个线程执行，那怎么利用多核 CPU 呢？ 最简单的方法是多进程 + 协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。
子程序就是协程的一种特例 Donald Knuth 的一句话总结协程的特点：
“子程序就是协程的一种特例。”
gevent  Python 通过 yield 提供了对协程的基本支持，但是不完全。而第三方的 gevent 为 Python 提供了比较完善的协程支持。
gevent 是第三方库，通过 greenlet 实现协程，其基本思想是：
当一个 greenlet 遇到 IO 操作时，比如访问网络，就自动切换到其他的 greenlet，等到 IO 操作完成，再在适当的时候切换回来继续执行。由于 IO 操作非常耗时，经常使程序处于等待状态，有了 gevent 为我们自动切换协程，就保证总有 greenlet 在运行，而不是等待 IO。
由于切换是在 IO 操作时自动完成，所以 gevent 需要修改 Python 自带的一些标准库，这一过程在启动时通过 monkey patch 完成：
from gevent import monkey; monkey.patch_socket() import gevent def f(n): for i in range(n): print gevent.</description>
    </item>
    
  </channel>
</rss>