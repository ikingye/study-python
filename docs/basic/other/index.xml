<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1.4 其他 on Python 学习笔记</title>
    <link>https://kingye.me/study-python/docs/basic/other/</link>
    <description>Recent content in 1.4 其他 on Python 学习笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kingye.me/study-python/docs/basic/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>协程</title>
      <link>https://kingye.me/study-python/docs/basic/other/coroutine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-python/docs/basic/other/coroutine/</guid>
      <description>&lt;h1 id=&#34;python-协程&#34;&gt;&#xA;  Python 协程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#python-%e5%8d%8f%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;执行效率高&#xA;&lt;ul&gt;&#xA;&lt;li&gt;子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。&lt;/li&gt;&#xA;&lt;li&gt;不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;因为协程是一个线程执行，那怎么利用多核 CPU 呢？&#xA;最简单的方法是&lt;strong&gt;多进程 + 协程&lt;/strong&gt;，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;子程序就是协程的一种特例&#34;&gt;&#xA;  子程序就是协程的一种特例&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%90%e7%a8%8b%e5%ba%8f%e5%b0%b1%e6%98%af%e5%8d%8f%e7%a8%8b%e7%9a%84%e4%b8%80%e7%a7%8d%e7%89%b9%e4%be%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Donald Knuth 的一句话总结协程的特点：&lt;/p&gt;&#xA;&lt;p&gt;“子程序就是协程的一种特例。”&lt;/p&gt;&#xA;&lt;h2 id=&#34;geventhttpsgithubcomgeventgevent-github-starshttpsimgshieldsiogithubstarsgeventgeventsvg&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/gevent/gevent&#34;&gt;gevent&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/gevent/gevent.svg&#34; alt=&#34;Github stars&#34; /&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#geventhttpsgithubcomgeventgevent-github-starshttpsimgshieldsiogithubstarsgeventgeventsvg&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Python 通过 yield 提供了对协程的基本支持，但是不完全。而第三方的 gevent 为 Python 提供了比较完善的协程支持。&lt;/p&gt;&#xA;&lt;p&gt;gevent 是第三方库，通过 greenlet 实现协程，其基本思想是：&lt;/p&gt;&#xA;&lt;p&gt;当一个 greenlet 遇到 IO 操作时，比如访问网络，就自动切换到其他的 greenlet，等到 IO 操作完成，再在适当的时候切换回来继续执行。由于 IO 操作非常耗时，经常使程序处于等待状态，有了 gevent 为我们自动切换协程，就保证总有 greenlet 在运行，而不是等待 IO。&lt;/p&gt;&#xA;&lt;p&gt;由于切换是在 IO 操作时自动完成，所以 gevent 需要修改 Python 自带的一些标准库，这一过程在启动时通过 &lt;code&gt;monkey patch&lt;/code&gt; 完成：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; gevent &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; monkey; monkey&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;patch_socket()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gevent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(n):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print gevent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getcurrent(), i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gevent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spawn(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gevent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spawn(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gevent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spawn(f, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anaconda</title>
      <link>https://kingye.me/study-python/docs/basic/other/anaconda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-python/docs/basic/other/anaconda/</guid>
      <description>&lt;h1 id=&#34;anaconda&#34;&gt;&#xA;  Anaconda&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#anaconda&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Anaconda 是一个&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E5%85%8D%E8%B4%B9&#34;&gt;免费&lt;/a&gt;&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81&#34;&gt;开源&lt;/a&gt; 的  &lt;a href=&#34;https://www.wikiwand.com/zh-cn/Python&#34;&gt;Python&lt;/a&gt; 和  &lt;a href=&#34;https://www.wikiwand.com/zh-cn/R%E8%AF%AD%E8%A8%80&#34;&gt;R 语言&lt;/a&gt;的发行版本，用于&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E8%AE%A1%E7%AE%97%E7%A7%91%E5%AD%A6&#34;&gt;计算科学&lt;/a&gt;（&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6&#34; title=&#34;数据科学&#34;&gt;数据科学&lt;/a&gt;、&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0&#34; title=&#34;机器学习&#34;&gt;机器学习&lt;/a&gt;、&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E5%A4%A7%E6%95%B8%E6%93%9A&#34; title=&#34;大数据&#34;&gt;大数据处理&lt;/a&gt;和&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90&#34;&gt;预测分析&lt;/a&gt;），Anaconda 致力于简化&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&#34;&gt;包管理&lt;/a&gt;和部署。&lt;/p&gt;&#xA;&lt;p&gt;Anaconda 的包使用&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F&#34;&gt;软件包管理系统&lt;/a&gt; &lt;a href=&#34;https://www.wikiwand.com/zh-cn/Conda&#34; title=&#34;Conda&#34;&gt;Conda&lt;/a&gt; 进行管理。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
