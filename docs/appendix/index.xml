<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第四部分 附录 on Python 学习笔记</title>
    <link>https://ikingye.github.io/study-python/docs/appendix/</link>
    <description>Recent content in 第四部分 附录 on Python 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/study-python/docs/appendix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4.1 教程</title>
      <link>https://ikingye.github.io/study-python/docs/appendix/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-python/docs/appendix/tutorial/</guid>
      <description>教程 基础 进阶 </description>
    </item>
    
    <item>
      <title>4.2 面试题</title>
      <link>https://ikingye.github.io/study-python/docs/appendix/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-python/docs/appendix/interview/</guid>
      <description>面试题 参考：
 如何面试 Python 后端工程师？  基础题 数据结构 元组是不是真的不可变？ tuple 的每个元素，指向永远不变。
要创建一个内容也不变的 tuple 怎么做？
必须保证 tuple 的每一个元素本身也不能变。
# “可变的” tuple： &amp;gt;&amp;gt;&amp;gt; t = (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;]) &amp;gt;&amp;gt;&amp;gt; t[2][0] = &amp;#39;X&amp;#39; &amp;gt;&amp;gt;&amp;gt; t[2][1] = &amp;#39;Y&amp;#39; &amp;gt;&amp;gt;&amp;gt; t (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, [&amp;#39;X&amp;#39;, &amp;#39;Y&amp;#39;])  迭代器 vs 生成器 迭代器 把一个类作为一个迭代器使用需要在类中实现两个方法 __iter__() 与 __next__()
&amp;gt;&amp;gt;&amp;gt; list=[1,2,3,4] &amp;gt;&amp;gt;&amp;gt; it = iter(list) # 创建迭代器对象 &amp;gt;&amp;gt;&amp;gt; print (next(it)) # 输出迭代器的下一个元素 1 &amp;gt;&amp;gt;&amp;gt; print (next(it)) 2 &amp;gt;&amp;gt;&amp;gt; 生成器 在 Python 中，使用了 yield 的函数被称为生成器（generator）。</description>
    </item>
    
    <item>
      <title>4.3 关注项目</title>
      <link>https://ikingye.github.io/study-python/docs/appendix/attention/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/study-python/docs/appendix/attention/</guid>
      <description>关注项目 twisted/twisted  Event-driven networking engine written in Python. https://www.twistedmatrix.com
gevent/gevent  Coroutine-based concurrency library for Python http://gevent.org
prompt-toolkit/python-prompt-toolkit  Library for building powerful interactive command line applications in Python https://python-prompt-toolkit.readthedocs.io/en/master/</description>
    </item>
    
  </channel>
</rss>